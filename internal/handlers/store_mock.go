// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	models "github.com/Gamilkarr/store/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetItemsQuantityOnStore mocks base method.
func (m *MockRepository) GetItemsQuantityOnStore(ctx context.Context, storeID int64) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsQuantityOnStore", ctx, storeID)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsQuantityOnStore indicates an expected call of GetItemsQuantityOnStore.
func (mr *MockRepositoryMockRecorder) GetItemsQuantityOnStore(ctx, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsQuantityOnStore", reflect.TypeOf((*MockRepository)(nil).GetItemsQuantityOnStore), ctx, storeID)
}

// ItemReserved mocks base method.
func (m *MockRepository) ItemReserved(ctx context.Context, storeID int64, items []models.Reserved) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemReserved", ctx, storeID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// ItemReserved indicates an expected call of ItemReserved.
func (mr *MockRepositoryMockRecorder) ItemReserved(ctx, storeID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemReserved", reflect.TypeOf((*MockRepository)(nil).ItemReserved), ctx, storeID, items)
}

// ItemUnreserved mocks base method.
func (m *MockRepository) ItemUnreserved(ctx context.Context, storeID int64, items []models.Reserved) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemUnreserved", ctx, storeID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// ItemUnreserved indicates an expected call of ItemUnreserved.
func (mr *MockRepositoryMockRecorder) ItemUnreserved(ctx, storeID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemUnreserved", reflect.TypeOf((*MockRepository)(nil).ItemUnreserved), ctx, storeID, items)
}
